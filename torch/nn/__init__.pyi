
from torch import Tensor, FloatTensor
from typing import Tuple, Dict, Any, Iterable, TypeVar, Generic, Self
from abc import ABCMeta

ModuleType = TypeVar('ModuleType', bound='Module')


class Module(Generic[ModuleType], metaclass=ABCMeta):
    def cuda(self) -> ModuleType: ...
    def parameters(self) -> Iterable[Any]: ...
    def get_parameter(self, name: str) -> Parameter: ...
    def state_dict(self) -> Dict[Any, Any]: ...
    def load_state_dict(self, state_dict: Dict[str, Any]) -> None: ...
    def __call__(self, *args) -> FloatTensor: ...
    def add_module(self, name: str, model: Module) -> None: ...
    def to(self, device: str) -> Self : ...
    ...


class Linear(Module['Linear']):
    def __init__(self, hidden_size: int, output_size: int) -> None: ...
    def __call__(self, *args) -> FloatTensor: ...


class GRU(Module['GRU']):
    def __init__(self, input_size: int, hidden_size: int,
                 num_layers: int = 1, batch_first: bool = False) -> None: ...
    def __call__(self, *args) -> Tuple[FloatTensor, FloatTensor]: ... # type: ignore


class Embedding(Module['Embedding']):
    def __init__(self, in_size: int, out_size: int) -> None: ...
    def __call__(self, *args) -> FloatTensor: ...
    def cuda(self) -> 'Embedding': ...


class LogSoftmax(Module['LogSoftmax']):
    def __init__(self, dim: int) -> None: ...
    def __call__(self, *args) -> FloatTensor: ...
    def cuda(self) -> 'LogSoftmax': ...

class ReLU(Module['ReLU']):
    def __init__(self, inplace: bool = False) -> None: ...
    def __call__(self, *args) -> FloatTensor: ...
    def cuda(self) -> 'ReLU': ...

class Sigmoid(Module['Sigmoid']):
    def __init__(self) -> None: ...
    def __call__(self, *args) -> FloatTensor: ...
    def cuda(self) -> 'Sigmoid': ...

class Sequential(Module['Sequential']):
    def __init__(self, *args: Module) -> None: ...
    def __call__(self, *args) -> FloatTensor: ...
    def cuda(self) -> 'Sequential': ...

class _Loss(Module):
    ...


class NLLLoss(_Loss):
    ...


class MSELoss(_Loss):
    ...

class Parameter(Tensor):
    ...
